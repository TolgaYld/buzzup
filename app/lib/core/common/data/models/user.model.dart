import 'package:buzzup/core/common/base_interfaces/id_holder.dart';
import 'package:buzzup/core/common/data/models/channel.model.dart';
import 'package:buzzup/core/common/data/models/comment.model.dart';
import 'package:buzzup/core/common/data/models/content/post.model.dart';
import 'package:buzzup/core/common/data/models/content/story.model.dart';
import 'package:buzzup/core/common/data/models/report.model.dart';
import 'package:buzzup/core/common/domain/entities/all_entities.dart';
import 'package:buzzup/core/enums/user_type.dart';
import 'package:buzzup/core/common/data/models/location.model.dart';
import 'package:buzzup/core/common/data/models/token.model.dart';
import 'package:dart_mappable/dart_mappable.dart';
import 'package:buzzup/core/utils/datetime_converter.dart';

part 'user.model.mapper.dart';

@MappableClass()
class UserModel extends UserEntity with UserModelMappable implements IdHolder {
  UserModel({
    @MappableField(key: '_id') required super.id,
    required super.username,
    required super.email,
    @MappableField(key: 'is_banned') required super.isBanned,
    @MappableField(key: 'is_deleted') required super.isDeleted,
    @MappableField(key: 'user_type') required super.userType,
    required super.official,
    required super.distance,
    required super.points,
    super.location,
    super.provider,
    @DateTimeConverter() @MappableField(key: 'created_at') required super.createdAt,
    @MappableField(key: 'auto_generated_username') super.autoGeneratedUsername,
    @MappableField(key: 'username_change_counter') super.usernameChangeCounter,
    super.channels,
    @MappableField(key: 'device_type') super.deviceType,
    @MappableField(key: 'device_id') super.deviceId,
    @MappableField(key: 'provider_id') super.providerId,
    super.posts,
    super.storys,
    super.comments,
    super.reports,
    super.reporteds,
    this.tokens,
  });

  factory UserModel.empty() => UserModel(
        id: 'empty',
        username: 'empty',
        email: 'test123@test.com',
        userType: UserType.user,
        isBanned: false,
        isDeleted: false,
        official: false,
        distance: 9000,
        points: 0,
        location: LocationModel.empty(),
        createdAt: DateTime.parse('2024-02-10T14:38:36.936Z'),
        autoGeneratedUsername: false,
        usernameChangeCounter: 0,
        provider: "local",
      );

  final TokenModel? tokens;

  UserEntity toEntity() => UserEntity(
        id: id,
        username: username,
        email: email,
        isBanned: isBanned,
        isDeleted: isDeleted,
        userType: userType,
        official: official,
        distance: distance,
        points: points,
        location: location,
        provider: provider,
        createdAt: createdAt,
        autoGeneratedUsername: autoGeneratedUsername,
        usernameChangeCounter: usernameChangeCounter,
        channels: channels,
        deviceType: deviceType,
        deviceId: deviceId,
        providerId: providerId,
        posts: posts,
        storys: storys,
        comments: comments,
        reports: reports,
        reporteds: reporteds,
      );

  static UserModel fromEntity(UserEntity entity) => UserModel(
        id: entity.id,
        username: entity.username,
        email: entity.email,
        isBanned: entity.isBanned,
        isDeleted: entity.isDeleted,
        userType: entity.userType,
        official: entity.official,
        distance: entity.distance,
        points: entity.points,
        location: switch (entity.location) {
          final location? => LocationModel.fromEntity(location),
          null => null,
        },
        provider: entity.provider,
        createdAt: entity.createdAt,
        autoGeneratedUsername: entity.autoGeneratedUsername,
        usernameChangeCounter: entity.usernameChangeCounter,
        channels: switch (entity.channels) {
          final channels? => channels.map(ChannelModel.fromEntity).toList(),
          null => null,
        },
        deviceType: entity.deviceType,
        deviceId: entity.deviceId,
        providerId: entity.providerId,
        posts: switch (entity.posts) {
          final posts? => posts.map(PostModel.fromEntity).toList(),
          null => null,
        },
        storys: switch (entity.storys) {
          final storys? => storys.map(StoryModel.fromEntity).toList(),
          null => null,
        },
        comments: switch (entity.comments) {
          final comments? => comments.map(CommentModel.fromEntity).toList(),
          null => null,
        },
        reports: switch (entity.reports) {
          final reports? => reports.map(ReportModel.fromEntity).toList(),
          null => null,
        },
        reporteds: switch (entity.reporteds) {
          final reporteds? => reporteds.map(ReportModel.fromEntity).toList(),
          null => null,
        },
      );
}
